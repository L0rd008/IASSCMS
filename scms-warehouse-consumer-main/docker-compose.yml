version: '3'
services:
  broker:
    image: apache/kafka:latest
    container_name: broker
    environment:
      KAFKA_KRAFT_MODE: "true"  # This enables KRaft mode in Kafka.
      KAFKA_PROCESS_ROLES: controller,broker  # Kafka acts as both broker and controller.
      KAFKA_NODE_ID: 1  # A unique ID for this Kafka instance.
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"  # Defines the controller voters.
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093     # PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LOG_DIRS: /var/lib/kafka/data  # Where Kafka stores its logs.
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Kafka will automatically create topics if ne
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Since weâ€™re running one broker, one replica is enough.
      KAFKA_LOG_RETENTION_HOURS: 168  # Keep logs for 7 days.
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0  # No delay for consumer rebalancing.
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk"  # A unique ID for the Kafka cluster.
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "./opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 > /dev/null 2>&1",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - backend


  db:
    image: postgres:17
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./db-init:/docker-entrypoint-initdb.d
    env_file:
      - .env
    networks:
      - backend


  order_db:
    image: postgres:17
    environment:
      POSTGRES_DB: ${ORDER_DATABASE_NAME}
      POSTGRES_USER: ${ORDER_DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${ORDER_DATABASE_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - ./order-init:/docker-entrypoint-initdb.d
    env_file:
      - .env
    networks:
      - backend


  pgadmin:
      image: dpage/pgadmin4
      container_name: pgadmin
      environment:
        PGADMIN_DEFAULT_EMAIL: admin@example.com
        PGADMIN_DEFAULT_PASSWORD: admin123
      ports:
        - "5500:80"
      depends_on:
        - db
        - order_db
      networks:
        - backend


  warehouse-consumer:
      build:

        context: ./warehouse_consumer
        dockerfile: Dockerfile

      container_name: inventory-consumer
      depends_on:
        - db

      environment:
        POSTGRES_DB: ${DATABASE_NAME}
        POSTGRES_USER: ${DATABASE_USERNAME}
        POSTGRES_PASSWORD: ${DATABASE_PASSWORD}


      networks:
        - backend

  order-consumer:
    build:
      context: ./order_consumer
      dockerfile: Dockerfile

    container_name: order-consumer
    depends_on:
      - order_db


    environment:
      POSTGRES_DB: ${ORDER_DATABASE_NAME}
      POSTGRES_USER: ${ORDER_DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${ORDER_DATABASE_PASSWORD}

    networks:
      - backend


volumes:
    postgres_data:

networks:
  backend:
    external: true